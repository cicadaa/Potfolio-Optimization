GAMS 28.2.0  r750fa45 Released Aug 19, 2019 DEX-DEG x86 64bit/Mac OS X - 12/04/19 14:17:59 Page 1
Value at Risk and Conditional Value at Risk models
C o m p i l a t i o n


   2  * VaR_CVaR.gms: Value at Risk and Conditional Value at Risk models.
   4  option optcr=0, reslim=120;
   5   
   6  SET
   7           scen
   8           Asset
   9  ;
  10  ALIAS(Asset,i);
  11  ALIAS(scen, s);
  12   
  13  PARAMETER
  14           RetScen(i, s)
  15  ;
  16   
GDXIN   /Users/cicada/Documents/DTU/OF/final/Scenarios01.gdx
--- LOAD  Asset = 3:Asset
--- LOAD  scen = 2:scen
  18  $LOAD Asset, scen, RetScen
****                           $495
**** 495  Load dimensions are different
  20   
  21   
  22  SCALARS
  23          Budget        'Nominal investment budget'
  24          alpha         'Confidence level'
  25          Lambda        'Risk aversion parameter'
  26          CVaRLim       'CVaR limit'
  27          ExpRetLim     'Expected Return Limit'
  28  ;
  29   
  30  Budget = 100000.0;
  31  alpha  = 0.95;
  32  CVaRLim = Budget*10;
  33  ExpRetLim = -100000;
  34   
  35  PARAMETERS
  36          pr(s)       'Scenario probability'
  37          P(i,s)      'Final values'
  38          EP(i)       'Expected final values'
  39  ;
  40   
  41  pr(s) = 1.0 / CARD(s);
  42   
  43   
  44  P(i,s) = 1 + RetScen( i, s );
****                     $141
**** 141  Symbol declared but no values have been assigned. Check for missing
****         data definition, assignment, data loading or implicit assignment
****         via a solve statement.
****         A wild shot: You may have spurious commas in the explanatory
****         text of a declaration. Check symbol reference list.
  45   
  46   
  47  EP(i) = SUM(s, pr(s) * P(i,s));
  48   
  49   
  50  POSITIVE VARIABLES
  51           x(i)            'Holdings of assets in monetary units (not proportions)'
  52           VaRDev(s)       'Measures of the deviation from the VaR'
  53  ;
  54   
  55  VARIABLES
  56           losses(s)       'The scenario loss function'
  57           VaR             'The alpha Value-at-Risk'
  58           CVaR            'The alpha Conditional Value-at-Risk'
  59           ExpectedReturn  'Expected return of the portfolio'
  60           obj             'objective function value'
  61  ;
  62   
  63   
  64   
  65  EQUATIONS
  66           BudgetCon       'Equation defining the budget constraint'
  67           ReturnCon       'Equation defining the portfolio expected return'
  68           LossDefCon(s)   'Equation defining the losses'
  69           VaRDevCon(s)    'Equation defining the VaRDev variable'
  70           CVaRDefCon      'Equation defining the CVaR'
  71           ObjectivFunc    'lambda formulation of the MeanCVaR model'
  72           CVaRLimCon      'Constraint limiting the CVaR'
  73           ReturnLimCon    'Constraint on a minimum expected return'
  74  ;
  75   
  76   
  77   
  78  *--Objective------
  79   
  80  *--s.t.-----------
  81  BudgetCon ..             sum(i, x(i)) =E= Budget;
  82   
  83  ReturnCon ..             ExpectedReturn =E= sum(i, EP(i)*x(i));
  84   
  85  LossDefCon(s) ..         Losses(s) =E= -1*sum(i, P(i, s)*x(i) );
  86   
  87  VaRDevCon(s) ..          VaRDev(s) =G= Losses(s) - VaR;
  88   
  89  CVaRDefCon ..            CVaR =E= VaR + (sum(s, pr(s)*VarDev(s) ) )/(1 - alpha);
  90   
  91  ObjectivFunc ..          Obj =E= (1-lambda)*ExpectedReturn - lambda*CVaR;
  92   
  93  CVaRLimCon ..            CVaR =L= CVaRLim;
  94   
  95  ReturnLimCon ..          ExpectedReturn =G= ExpRetLim;
  96   
  97   
  98   
  99  *--Models-----------
 100   
 101   
 102   
 103  //Let's build an equal weight portfolio first,
 104  //by fixing the X values to be eqaully weighted:
 105  X.fx(i) = Budget/card(i);
 106  display X.l;
 107   
 108   
 109  MODEL CVaRModel 'The Conditional Value-at-Risk Model' /BudgetCon, ReturnCon, LossDefCon, VaRDevCon,CVaRDefCon, ObjectivFunc, CVaRLimCon, ReturnLimCon/;
 110   
 111   
 112   
 113  *------------CVaR----------------------
 114  //We need both terms in the objective function to be under control in order for the model to calculate mean return and CVaR values correctly:
 115  lambda = 0.999;
 116  SOLVE CVaRModel Maximizing OBJ Using LP;
****                                         $257
**** 257  Solve statement not checked because of previous errors
 117   
 118   
 119  DISPLAY X.l, ExpectedReturn.l, VaR.L, CVaR.L;
****                              $141   $141    $141
**** 141  Symbol declared but no values have been assigned. Check for missing
****         data definition, assignment, data loading or implicit assignment
****         via a solve statement.
****         A wild shot: You may have spurious commas in the explanatory
****         text of a declaration. Check symbol reference list.
 120   
 121   
 122  Parameters
 123      MuTarget,
 124      CVaRTarget,
 125      BestCase,
 126      WorstCase
 127  ;
 128   
 129  //Now we use the expected return and the CVaR of the equal weight strategy as target benchmarks in the CVaR model
 130  MuTarget = ExpectedReturn.l;
 131  CVaRTarget = CVaR.L;
 132  display MuTarget, CVaRTarget;
 133   
 134  parameter PortValue(s);
 135  PortValue(s) = sum(i, P(i, s)*x.l(i) );
 136   
 137  parameter SummaryReport(*,*);
 138  SummaryReport(s,'PortValue') = PortValue(s);
 139   
 140  BestCase = Smax(s, PortValue(s));
 141  WorstCase = Smin(s, PortValue(s));
 142  display BestCase, WorstCase;
 143   
 144   
 145   
 146  *EXECUTE_UNLOAD 'SummaryReport.gdx', SummaryReport;
 147  *EXECUTE 'gdxxrw.exe SummaryReport.gdx O=PortValue.xls par=SummaryReport rng=sheet1!a1' ;
 148   
 149  //The next two lines are used to free the X variable again
 150  X.lo(i) = 0;
 151  X.up(i) = Budget*10;
 152   
 153   
 154  *------------------Eff Front with equidistant CVaR--------------------*
 155  set pp /pp0*pp10/;
 156   
 157  PARAMETERS
 158           RunningCVaR(pp)          'Optimal level of portfolio CVaR'
 159           RunningReturn(pp)        'Portfolio return'
 160           RunningAllocation(pp,i)  'Optimal asset allocation'
 161           MaxCVar
 162           MinCVar
 163  ;
 164   
 165  *first we find the biggest possible average, hence maximum CVaR:
 166  lambda = 0.001;
 167  SOLVE CVaRModel Maximizing OBJ Using LP;
****                                         $257
**** 257  Solve statement not checked because of previous errors
 168  MaxCVar = CVaR.l;
 169  RunningCVaR(pp)$(ord(pp)=1) = CVaR.l;
 170  RunningReturn(pp)$(ord(pp)=1)  = ExpectedReturn.l;
 171  RunningAllocation(pp,i)$(ord(pp)=1)     = x.l(i);
 172   
 173  *Then we find the lowest possible variance:
 174  lambda = 0.999;
 175  SOLVE CVaRModel Maximizing OBJ Using LP;
****                                         $257
**** 257  Solve statement not checked because of previous errors
 176  MinCVar = CVaR.l;
 177  RunningCVaR(pp)$(ord(pp)=card(pp)) = CVaR.l;
 178  RunningReturn(pp)$(ord(pp)=card(pp))  = ExpectedReturn.l;
 179  RunningAllocation(pp,i)$(ord(pp)=card(pp))     = x.l(i);
 180   
 181  display MaxCVar, MinCVar;
 182   
 183  *Then we find the equidistant variances in between
 184  lambda = 0;
 185  CVarLim = MaxCVar;
 186  loop(pp$(ord(pp)>1 and ord(pp)<card(pp)),
 187  CVarLim = CVarLim - (MaxCVar-MinCVar)/(card(pp)-1);
 188  SOLVE CVaRModel Maximizing OBJ Using LP;
****                                         $257
**** 257  Solve statement not checked because of previous errors
 189  *display VarLim, PortVariance.l;
 190  RunningCVaR(pp) = CVaR.l;
 191  RunningReturn(pp)  = ExpectedReturn.l;
 192  RunningAllocation(pp,i)     = x.l(i);
 193  );
 194   
 195  display RunningCVaR, RunningReturn, RunningAllocation;
 196   
 197   
 198  parameter SummaryReport2(*,*);
 199  * Store results by rows
 200  SummaryReport2(i,pp) = RunningAllocation(pp,i);
 201  SummaryReport2('CVaR',pp) = RunningCVaR(pp);
 202  SummaryReport2('Return',pp) = RunningReturn(pp);
 203   
 204   
 205  DISPLAY SummaryReport2;
 206  * Write SummaryReport into an Excel file
 207   
 208  *EXECUTE_UNLOAD 'Summary2.gdx', SummaryReport2;
 209  *EXECUTE 'gdxxrw.exe Summary2.gdx O=MeanCVaRFrontier.xls par=SummaryReport2 rng=sheet1!a1' ;
 210   
 211   
 212  //Let's minimize CVaR with the target return from the equal weight portfolio
 213  ExpRetLim = Mutarget;
 214  display ExpRetLim;
 215   
 216  Lambda = 1;
 217  CVaRLim = CVaRLim+100000;
 218  SOLVE CVaRModel Maximizing OBJ Using LP;
****                                         $257
**** 257  Solve statement not checked because of previous errors
 219  display X.l, ExpectedReturn.l, CVaR.l;
 220   
 221   
 222  //Let's maximize expected return with the target CVaR from the equal weight portfolio
 223  CVaRLim = CVaRtarget;
 224   
 225   
 226  Lambda = 0;
 227  ExpRetLim = -100000;
 228  SOLVE CVaRModel Maximizing OBJ Using LP;
****                                         $257
**** 257  Solve statement not checked because of previous errors
 229  display X.l, ExpectedReturn.l, CVaR.l;
 230   
 231   
 232  EXECUTE_UNLOAD 'Inithold.gdx', X.l,Asset;
 233   
 234   
 235   
 236   
 237   
 238   
 239   
 240   
 241   
 242   
 243   
 244   
 245   
 246   
 247   
 248   
 249   

**** 11 ERROR(S)   0 WARNING(S)
GAMS 28.2.0  r750fa45 Released Aug 19, 2019 DEX-DEG x86 64bit/Mac OS X - 12/04/19 14:17:59 Page 2
Value at Risk and Conditional Value at Risk models
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  /Users/cicada/Documents/DTU/OF/final/CVaRModel_02.gms
     2       17 GDXIN          1      17  /Users/cicada/Documents/DTU/OF/final/Scenarios01.gdx


COMPILATION TIME     =        0.006 SECONDS      3 MB  28.2.0 r750fa45 DEX-DEG


USER: Course License Fall 2019                       G190805/0001AO-GEN
      Technical University of Denmark, Management Engineering    DCE146
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      /Users/cicada/Documents/DTU/OF/final/CVaRModel_02.gms
Output     /Users/cicada/Documents/DTU/OF/final/CVaRModel_02.lst

**** USER ERROR(S) ENCOUNTERED
